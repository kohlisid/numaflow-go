// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/apis/proto/flatmap/v1/flatmap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlatmapClient is the client API for Flatmap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlatmapClient interface {
	// MapFn applies a function to each map request element.
	MapFn(ctx context.Context, opts ...grpc.CallOption) (Flatmap_MapFnClient, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type flatmapClient struct {
	cc grpc.ClientConnInterface
}

func NewFlatmapClient(cc grpc.ClientConnInterface) FlatmapClient {
	return &flatmapClient{cc}
}

func (c *flatmapClient) MapFn(ctx context.Context, opts ...grpc.CallOption) (Flatmap_MapFnClient, error) {
	stream, err := c.cc.NewStream(ctx, &Flatmap_ServiceDesc.Streams[0], "/flatmap.v1.Flatmap/MapFn", opts...)
	if err != nil {
		return nil, err
	}
	x := &flatmapMapFnClient{stream}
	return x, nil
}

type Flatmap_MapFnClient interface {
	Send(*MapRequest) error
	Recv() (*MapResponse, error)
	grpc.ClientStream
}

type flatmapMapFnClient struct {
	grpc.ClientStream
}

func (x *flatmapMapFnClient) Send(m *MapRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flatmapMapFnClient) Recv() (*MapResponse, error) {
	m := new(MapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flatmapClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/flatmap.v1.Flatmap/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlatmapServer is the server API for Flatmap service.
// All implementations must embed UnimplementedFlatmapServer
// for forward compatibility
type FlatmapServer interface {
	// MapFn applies a function to each map request element.
	MapFn(Flatmap_MapFnServer) error
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedFlatmapServer()
}

// UnimplementedFlatmapServer must be embedded to have forward compatible implementations.
type UnimplementedFlatmapServer struct {
}

func (UnimplementedFlatmapServer) MapFn(Flatmap_MapFnServer) error {
	return status.Errorf(codes.Unimplemented, "method MapFn not implemented")
}
func (UnimplementedFlatmapServer) IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedFlatmapServer) mustEmbedUnimplementedFlatmapServer() {}

// UnsafeFlatmapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlatmapServer will
// result in compilation errors.
type UnsafeFlatmapServer interface {
	mustEmbedUnimplementedFlatmapServer()
}

func RegisterFlatmapServer(s grpc.ServiceRegistrar, srv FlatmapServer) {
	s.RegisterService(&Flatmap_ServiceDesc, srv)
}

func _Flatmap_MapFn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlatmapServer).MapFn(&flatmapMapFnServer{stream})
}

type Flatmap_MapFnServer interface {
	Send(*MapResponse) error
	Recv() (*MapRequest, error)
	grpc.ServerStream
}

type flatmapMapFnServer struct {
	grpc.ServerStream
}

func (x *flatmapMapFnServer) Send(m *MapResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flatmapMapFnServer) Recv() (*MapRequest, error) {
	m := new(MapRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Flatmap_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlatmapServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flatmap.v1.Flatmap/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlatmapServer).IsReady(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Flatmap_ServiceDesc is the grpc.ServiceDesc for Flatmap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flatmap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flatmap.v1.Flatmap",
	HandlerType: (*FlatmapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReady",
			Handler:    _Flatmap_IsReady_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MapFn",
			Handler:       _Flatmap_MapFn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/apis/proto/flatmap/v1/flatmap.proto",
}
