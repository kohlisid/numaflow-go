// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/flatmap/v1 (interfaces: FlatmapClient,Flatmap_MapFnClient)

// Package flatmapmock is a generated GoMock package.
package flatmapmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/flatmap/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockFlatmapClient is a mock of FlatmapClient interface.
type MockFlatmapClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlatmapClientMockRecorder
}

// MockFlatmapClientMockRecorder is the mock recorder for MockFlatmapClient.
type MockFlatmapClientMockRecorder struct {
	mock *MockFlatmapClient
}

// NewMockFlatmapClient creates a new mock instance.
func NewMockFlatmapClient(ctrl *gomock.Controller) *MockFlatmapClient {
	mock := &MockFlatmapClient{ctrl: ctrl}
	mock.recorder = &MockFlatmapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatmapClient) EXPECT() *MockFlatmapClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockFlatmapClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockFlatmapClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockFlatmapClient)(nil).IsReady), varargs...)
}

// MapFn mocks base method.
func (m *MockFlatmapClient) MapFn(arg0 context.Context, arg1 ...grpc.CallOption) (v1.Flatmap_MapFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MapFn", varargs...)
	ret0, _ := ret[0].(v1.Flatmap_MapFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapFn indicates an expected call of MapFn.
func (mr *MockFlatmapClientMockRecorder) MapFn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapFn", reflect.TypeOf((*MockFlatmapClient)(nil).MapFn), varargs...)
}

// MockFlatmap_MapFnClient is a mock of Flatmap_MapFnClient interface.
type MockFlatmap_MapFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlatmap_MapFnClientMockRecorder
}

// MockFlatmap_MapFnClientMockRecorder is the mock recorder for MockFlatmap_MapFnClient.
type MockFlatmap_MapFnClientMockRecorder struct {
	mock *MockFlatmap_MapFnClient
}

// NewMockFlatmap_MapFnClient creates a new mock instance.
func NewMockFlatmap_MapFnClient(ctrl *gomock.Controller) *MockFlatmap_MapFnClient {
	mock := &MockFlatmap_MapFnClient{ctrl: ctrl}
	mock.recorder = &MockFlatmap_MapFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatmap_MapFnClient) EXPECT() *MockFlatmap_MapFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFlatmap_MapFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFlatmap_MapFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFlatmap_MapFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFlatmap_MapFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFlatmap_MapFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFlatmap_MapFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFlatmap_MapFnClient) Recv() (*v1.MapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.MapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFlatmap_MapFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockFlatmap_MapFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFlatmap_MapFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockFlatmap_MapFnClient) Send(arg0 *v1.MapRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFlatmap_MapFnClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockFlatmap_MapFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFlatmap_MapFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockFlatmap_MapFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFlatmap_MapFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFlatmap_MapFnClient)(nil).Trailer))
}
